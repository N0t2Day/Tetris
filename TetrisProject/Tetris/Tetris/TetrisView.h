//
//  TetrisView.h
//  Tetris
//
//  Created by master on 30.12.17.
//  Copyright © 2017 l. All rights reserved.
//

#import <UIKit/UIKit.h>
static const int wrkAreaWidth = 16; // Ширина каждой строки массива
static const int wrkAreaHeight = 22; // Кол-во строк в массиве

/*
 * Типы для работы с фигурами
 * -----------------------------------------------------------
 */
typedef const unsigned char Figure[4][4][4];
typedef const Figure *PFigure;


/*
 * Образы фигур
 * -----------------------------------------------------------
 */
static  unsigned char	chFrstFig[4][4][4] =
{
    {
        { 0, 0, 0, 0 },		//
        { 0, 1, 1, 0 },		//    [][]
        { 1, 1, 0, 0 },		//  [][]
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 1, 0, 0 },		//    []
        { 0, 1, 1, 0 },		//    [][]
        { 0, 0, 1, 0 }		//      []
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 0, 1, 1 },		//    [][]
        { 0, 1, 1, 0 },		//  [][]
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 1, 0, 0 },		//    []
        { 0, 1, 1, 0 },		//    [][]
        { 0, 0, 1, 0 },		//      []
        { 0, 0, 0, 0 }		//
    }
};

static  unsigned char	chScndFig[4][4][4] =
{
    {
        { 0, 0, 0, 0 },		//
        { 1, 1, 1, 1 },		//  [][][][]
        { 0, 0, 0, 0 },		//
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 1, 0, 0 },		//    []
        { 0, 1, 0, 0 },		//    []
        { 0, 1, 0, 0 },		//    []
        { 0, 1, 0, 0 },		//    []
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 0, 0, 0 },		//
        { 1, 1, 1, 1 },		//  [][][][]
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 1, 0, 0 },		//    []
        { 0, 1, 0, 0 },		//    []
        { 0, 1, 0, 0 },		//    []
        { 0, 1, 0, 0 },		//    []
    }
};

static  unsigned char	chThrdFig[4][4][4] =
{
    {
        { 0, 0, 0, 0 },		//
        { 0, 1, 1, 0 },		//    [][]
        { 0, 0, 1, 1 },		//      [][]
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 1, 0 },		//      []
        { 0, 1, 1, 0 },		//    [][]
        { 0, 1, 0, 0 },		//    []
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 0, 0 },		//
        { 1, 1, 0, 0 },		//    [][]
        { 0, 1, 1, 0 },		//      [][]
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 0, 1, 0 },		//      []
        { 0, 1, 1, 0 },		//    [][]
        { 0, 1, 0, 0 }		//    []
    }
};

static  unsigned char	chFrthFig[4][4][4] =
{
    {
        { 0, 0, 0, 0 },		//
        { 0, 1, 1, 0 },		//    [][]
        { 0, 1, 1, 0 },		//    [][]
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 1, 1, 0 },		//    [][]
        { 0, 1, 1, 0 },		//    [][]
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 1, 1, 0 },		//    [][]
        { 0, 1, 1, 0 },		//    [][]
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 1, 1, 0 },		//    [][]
        { 0, 1, 1, 0 },		//    [][]
        { 0, 0, 0, 0 }		//
    }
};

static  unsigned char	chFvthFig[4][4][4] =
{
    {
        { 0, 0, 0, 0 },		//
        { 0, 1, 1, 1 },		//    [][][]
        { 0, 1, 0, 0 },		//    []
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 1, 0, 0 },		//    []
        { 0, 1, 0, 0 },		//    []
        { 0, 1, 1, 0 },		//    [][]
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 0, 1, 0 },		//        []
        { 1, 1, 1, 0 },		//    [][][]
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 1, 1, 0 },		//      [][]
        { 0, 0, 1, 0 },		//        []
        { 0, 0, 1, 0 }		//        []
    }
};

static  unsigned char	chSxthFig[4][4][4] =
{
    {
        { 0, 0, 0, 0 },		//
        { 1, 1, 1, 0 },		//  [][][]
        { 0, 0, 1, 0 },		//      []
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 1, 1, 0 },		//  [][]
        { 0, 1, 0, 0 },		//  []
        { 0, 1, 0, 0 }		//  []
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 1, 0, 0 },		//  []
        { 0, 1, 1, 1 },		//  [][][]
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 1, 0 },		//    []
        { 0, 0, 1, 0 },		//    []
        { 0, 1, 1, 0 },		//  [][]
        { 0, 0, 0, 0 }		//
    }
};

static  unsigned char	chSvthFig[4][4][4] =
{
    {
        { 0, 0, 0, 0 },		//
        { 1, 1, 1, 0 },		//  [][][]
        { 0, 1, 0, 0 },		//    []
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 1, 0, 0 },		//    []
        { 0, 1, 1, 0 },		//    [][]
        { 0, 1, 0, 0 }		//    []
    },
    {
        { 0, 0, 0, 0 },		//
        { 0, 0, 1, 0 },		//    []
        { 0, 1, 1, 1 },		//  [][][]
        { 0, 0, 0, 0 }		//
    },
    {
        { 0, 0, 1, 0 },		//    []
        { 0, 1, 1, 0 },		//  [][]
        { 0, 0, 1, 0 },		//    []
        { 0, 0, 0, 0 }		//
    }
};

/*
 * Цвета
 * -----------------------------------------------------------
 */
struct	TetrisColor
{
    double	red;
    double	green;
    double	blue;
};

static  struct	TetrisColor	colors[]	=
{
    { 1.0, 	1.0,	0.0 },	// Желтый
    { 0.6,	0.6,	0.0 },	// Коричневый
    { 0.8,	0.0,	0.0 },	// Красный
    { 0.0,  0.0,    1.0 },  // Синий
    { 0.0,  1.0,    0.0 },  // Зеленый
    { 0.7,  0.7,    0.2 },  // Темно-Желтый
    { 0.0,  0.0,    0.5 },  // Темно-Синий
    { 0.0,  0.5,    0.0 },  // Темно-Зеленый
    { 0.5,  0.0,    0.5 }   // Темно-Magenta
};

static  const   int	COLOR_BACKGROUND	= 0;	// Индекс в массиве цветов для фона
static  const   int	COLOR_WALLBORDER	= 1;	// Индекс в массиве цветов для стенки стакана




@interface TetrisView : UIView
{
    /**
     * Массив представляющий рабочую область (стакан)
     */
    unsigned char wrkArea[wrkAreaHeight][wrkAreaWidth];
    PFigure figure;     // Указатель на массив являющийся образом для текущей падающей фигуры
    int curFigColor;    // цвет текущей фигуры
    int curFigPos;      // Позиция "поворота" текущей фигуры 0-top 1-right 2-bottom 3-left
    
    
    unsigned int curFigRow; // Координата Х текущей фигуры (строка)
    unsigned int curFigCol; // Кордината Y текущей фигуры  (столбец)
    
    PFigure allFigures[7]; // массив с адресами всех макетов фигур (используеться при рандомной генерации фигуры).
    
    double curFigInterval; // задержка при падении фигуры.
    
    
    
    int deletedLevels; // Количесво удаленных уровней
    double tickCounter;
}



- (void) clearWorkingArea; // Подготовка рабочей области (стакана)
- (BOOL) nextFigure;       // генирирует след фигуру  true - фигурка поместилась игра идет false - игра законченна
- (void) moveMethod:(NSTimer *)timer;

- (BOOL) canMoveToNextCoords : (int)deltaX :(int) deltaY; // Проверяем, что фигуру можно передвинуть в другую позицию
- (void) moveByCoord:(int)deltaX :(int) deltaY;  // Перемещает фигуру в другую позицию.

- (void) addFigureToWorkingArea : (BOOL) isAdd; // isAdd - добавить или убрать фигуру из массива.

- (BOOL) canRotateToNextPossition;

- (void) nextPosition;

- (void) deleteFullLevels;

@end
















































